usage {
  author  = 'James Huang';
  created = '2001-11-12';
  lastMod = '2002-08-10';
  desc    = [[*
    A single-threaded HTTP proxy server handling only HTTP requets.
    It prints all the headers going both ways, excluding a list of
    file extensions. Each cookie is displayed nicely on a new line.
  *]];
}

port = 8088;
exclude = javanew java.util.HashSet;
exclude.add('gif');
exclude.add('jpg');
exclude.add('jpeg');
exclude.add('bmp');
exclude.add('css');
exclude.add('txt');
exclude.add('js');
exclude.add('class');

ss = startServer(port);
println <err> 'Proxy server on port ', port;
while {
  relay(acceptHttp(ss)); // single-thread
}

function relay c {
  // Connect to server; browser should send absolute URL.
  url = c.getUrl();
  display = ! exclude.contains( url.getFileExt().toLower() );
  
  doPost = c.getMethod().equalsIgnoreCase('post');
  println '--- URL: ', url;
  if display { println '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'; }
  if doPost { s = httpPost(url); }
  else      { s = httpGet(url); }

  // pass all client headers and content to server
  headers = c.getAllHeaders();
  if display {
    for x in headers {
      s.(x) = c.(x);
      println x, ': ', c.(x);
    }
  }
  if doPost {
    copyStreams c.getInputStream(), s.getOutputStream(), false;
  }

  // pass all server headers and content to client
  headers = s.getAllHeaders();
  if display {
    println '<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<';
    for x in headers {
      c.(x) = s.(x);
      println x, ': ', s.(x);
    }
  }
  copyStreams s.getInputStream(), c.getOutputStream();

catch:
  println <err> '[', $_.name, '] ', $_.message;
finally:
  if display { println; } // separate requests.
}
