!include '${JUDOROOT}/projects/doc_helpers.judi'

// BNF

println 'Creating the syntax nav page.', nl;

inSem = false;
semOut = null;
println 'Generating ', '${docroot}/ref/synn.html';
bnfOut = openTextFile('${docroot}/ref/synn.html', 'w');
$out = bnfOut;

curRule = null;
usedBy = new Object;
keywordUsedBy = new Object;
terminalUsedBy = new Object;
hasSem = false;

total = 0;
semanticsTotal = 0;

function addUsedBy nt {
  x = usedBy[ nt ];
  if x == null            { usedBy[ nt ] = [ curRule ]; }
  elif !x.exists(curRule) { x.add(curRule); }
}

function addKeywordUsedBy kw {
  if kw.startsWith('!') {
    if kw.length() == 1 { return; }
    if !kw.charAt(1).isAlpha() { return; }
  } elif !kw.startsWith('') && !kw.charAt(0).isAlpha() { return; }

  x = keywordUsedBy[ kw ];
  if x == null            { keywordUsedBy[ kw ] = [ curRule ]; }
  elif !x.exists(curRule) { x.add(curRule); }
}

function addTerminalUsedBy t {
  x = terminalUsedBy[ t ];
  if x == null            { terminalUsedBy[ t ] = [ curRule ]; }
  elif !x.exists(curRule) { x.add(curRule); }
}

// The engine.

do '${j09ref}/bnf.sgml' as sgml
{
<gramma>:
  . <$out> [[*
    <html><head><title>(*$_.name*) (*$_.version*)</title>
    <link href="../share/bnf.css" rel="stylesheet" type="text/css">
    <script language=JavaScript src=../share/judolib.js></script>
    <script language=JavaScript src=ntUsedBy.js></script>
    <script language=JavaScript><!--
    function switchDisplay(id) {
    var e = document.getElementById(id);
    if (e.innerHTML == '') { e.innerHTML = listUsedBy(id); }
    e.style.display = (e.style.display=='') ? 'none' : '';
    }
    //--></script>
    </head><body><a name=syntax></a>
    <h3>(*$_.name*) (*$_.version*) Grammar</h3>
    <p>For legends, see <a href="javascript:showSyn('')"><b>Syntax and Semantics</b></a>.</p>
    <table border=1><tr><td>
    <table bgcolor=#EEEEEE cellpadding=0 cellspacing=0 border=0 width=98% class=op>
  *]];
</gramma>: . <$out> '</td></tr></table></table>';
<!-->:   ;

<rule>:  hasSem = false;
         ++total;
         curRule = $_.nt;
         print <$out> [[*
           <tr><td width=200 valign=top nowrap>
           <b>&nbsp; <font class=nt><a name=(*$_.nt*)>(*$_.nt*)</a></font> &nbsp;::=</b></td>
           <td class=anno>
           <a href="JavaScript:;" onmouseup="switchDisplay('x_(*$_.nt*)')">used by</a> &nbsp; &nbsp;
           &nbsp; <a href="JavaScript:showNT('(*$_.nt*)')">semantics</a>&nbsp;<br>
           <div id=_(*$_.nt*) style="display=none;width:200;" class=used></div>
           </td></tr>
           <tr><td nowrap colspan=2><blockquote>
         *]];
</rule>: if !hasSem { . '  Rule with no semantics: ', curRule; }
         . <$out> '</blockquote></td></tr>', nl;

<nt>:    if !inSem { print <$out> showSynNTLink($_.name); addUsedBy($_.name); }
<Expr>:  if !inSem { print <$out> showSynNTLink('Expr');  addUsedBy('Expr');  }
<sfn>:   print <$out> showObjLink($_.name);
<obj>:   print <$out> showObjLink($_.id);
<fa>:    print <$out> showObjLink($_.id);

<note>:  print <$out> '<font color=red>';
</note>: print <$out> '</font>';
<or>:    if !inSem { print <$out> ' | '; }
<lq>:    if !inSem { print <$out> ' ( '; }
<rq>:    if !inSem { print <$out> ' )', $_.multi, ' '; }
<pi>:    if !inSem { print <$out> '<br>'; }
<!>:     if !inSem {
           x = $_.toString().substring(2);
           if x.startsWith('_') {
             x = x.substring(1,x.length()-1);
             addTerminalUsedBy(x);
             print <$out> '<font class=t>', x, '</font> ';
           } else {
             x = x.substring(0,x.length()-1);
             addKeywordUsedBy(x);
             print <$out> '<font class=kw>', x, '</font> ';
           }
         }

:TEXT:   print <$out> ' ';
<>:      ;

<semantics>:
  ++semanticsTotal;
  inSem = true;
  hasSem = true;
/***
  semOut = openTextFile(#refDir + 'sem_' + curRule + '.html', 'w');
  print <semOut> [[*
    <html><head><title>(*curRule*) Semantics</title>
    <link href="../share/bnf.css" rel="stylesheet" type="text/css">
    </head><body><h3>(*curRule*)</h3>
  *]];
  if $_.ignore {
    flush <semOut> '</body></html>';
    semOut.close();
    semOut = null;
  } else {
    inSem = true;
    $out = semOut;
  }
***/

</semantics>:
  inSem = false;
/***
  if semOut != null {
    flush <$out> '</body></html>';
    semOut.close();
    $out = bnfOut;
    inSem = false;
  }
***/
}

/*****************************************************************
// write the keyword used-by:

print <$out> [[*
  <br>&nbsp;<a name=kwref></a><table cellpadding=0 cellspacing=0 border=0 width=98%>
  <tr><td><h2>Keyword Usage Reference</h2></td>
  <td align=right valign=top nowrap><a href=#top>Syntax</a> | <a href=#tref>Terminal Usage Reference</a>
  </td></tr></table>
  <table bgcolor=#EEEEEE width=98%>
*]];
keywordUsedBy.remove(';');
for x in keywordUsedBy.keys().sort() {
  arr = keywordUsedBy[x];
  if arr.length > 0 {
    print <$out> '<tr><td valign=top class=kw>', x, '</td><td class=nt>';
    for y from 0 to arr.length-1 {
      print <$out> '<a href=#', arr[y], '>', arr[y], '</a> ';
    }
    . <$out> '</td></tr>';
  }
}
. <$out> '</table>';

// write the terminal used-by:

print <$out> [[*
  <br>&nbsp;<a name=tref></a><table cellpadding=0 cellspacing=0 border=0 width=98%>
  <tr><td><h2>Terminal Usage Reference</h2></td>
  <td align=right valign=top nowrap><a href=#top>Syntax</a> | <a href=#kwref>Keyword Usage Reference</a>
  </td></tr></table>
  <table bgcolor=#EEEEEE width=98%>
*]];
for x in terminalUsedBy.keys().sort() {
  arr = terminalUsedBy[x];
  if arr.length > 0 {
    print <$out> '<tr><td valign=top class=t>', x, '</td><td class=nt>';
    for y from 0 to arr.length-1 {
      print <$out> '<a href=#', arr[y], '>', arr[y], '</a> ';
    }
    . <$out> '</td></tr>';
  }
}
. <$out> '</table>';
*****************************************************************/
. <$out> '</body></html>';

/*****************************************************************
// write the used-by:

print <$out> [[*
  <script langeuage=JavaScript><!--
  var usedBy = new Object();
*]];

for x in usedBy.keys() {
  arr = usedBy[x];
  if arr.length > 0 {
    print <$out> 'usedBy["', x, '"]=[';
    for y from 0 to arr.length-1 {
      if y > 0 { print <$out> ','; }
      print <$out> '"', arr[y], '"';
    }
    . <$out> '];';
  }
}

print <$out> [[*
  function listUsedBy(id) {
    id = id.substring(1);
    var arr = usedBy[id];
    if (arr == null) return 'none.';
    var str = '';
    for (var i=0; i<arr.length; ++i) {
      str += '<a href=#' + arr[i] + '>' + arr[i] + '</a> &nbsp; ';
    }
    return str;
  }
  //--></script>
*]];
*****************************************************************/

$out.close();

. total, '  ', semanticsTotal;

catch: $_.pist();
