//    From  Input   To   ID  Type       Action 
//    ====  =====  ====  ==  =====      ======
fsa = [

  [ /* 0*/ [ '(',    1,  1,  'void',    'add' ],
    /* 0*/ [ ';',    0,  0,  'boolean', "push back and exit if single&&';' || multi&&'}'" ],
    /* 0*/ [ '}',    0,  0,  'boolean', "push back and exit if single&&';' || multi&&'}'" ],
    /* 0*/ [ '/',    9,  2,  'void',    'mark; add' ],
    /* 0*/ [ '-',   15,  2,  'void',    'mark; add' ],
    /* 0*/ [ '#',   17,  2,  'void',    'mark; add' ],
    /* 0*/ [ null,   0,  1,  'void',    'add' ],
  ],
  [ /* 1*/ [ '*',    2,  1,  'void',    'add' ],
    /* 1*/ [ null,   0,  1,  'void',    'add' ],
  ],
  [ /* 2*/ [ ')',    0,  1,  'void',    'add' ],
    /* 2*/ [ ' ',    2,  1,  'void',    'add' ],
    /* 2*/ [ '\t',   2,  1,  'void',    'add' ],
    /* 2*/ [ '\r',   2,  1,  'void',    'add' ],
    /* 2*/ [ '\n',   2,  1,  'void',    'add' ],
    /* 2*/ [ null,   3,  1,  'void',    'add' ],
  ],
  [ /* 3*/ [ '*',    4,  1,  'void',    'add' ],
    /* 3*/ [ '\'',   5,  1,  'void',    'add' ],
    /* 3*/ [ '"',    7,  1,  'void',    'add' ],
    /* 3*/ [ null,   3,  1,  'void',    'add' ],
  ],
  [ /* 4*/ [ ')',    0,  1,  'void',    'add' ],
    /* 4*/ [ null,   3,  1,  'void',    'add' ],
  ],
  [ /* 5*/ [ '\\',   6,  1,  'void',    'add' ],
    /* 5*/ [ '\'',   3,  1,  'void',    'add' ],
    /* 5*/ [ null,   5,  1,  'void',    'add' ],
  ],
  [ /* 6*/ [ null,   5,  1,  'void',    'add' ],
  ],
  [ /* 7*/ [ '\\',   8,  1,  'void',    'add' ],
    /* 7*/ [ '"',    3,  1,  'void',    'add' ],
    /* 7*/ [ null,   7,  1,  'void',    'add' ],
  ],
  [ /* 8*/ [ null,   7,  1,  'void',    'add' ],
  ],
  [ /* 9*/ [ '*',   10,  1,  'void',    'add' ],
    /* 9*/ [ '?',   12,  1,  'void',    'add' ],
    /* 9*/ [ '/',   14,  1,  'void',    'add' ],
    /* 9*/ [ null,   0,  3,  'void',    'add; clear mark' ],
  ],
  [ /*10*/ [ '*',   11,  1,  'void',    'add' ],
    /*10*/ [ null,  10,  1,  'void',    'add' ],
  ],
  [ /*11*/ [ '/',    0,  4,  'void',    'remove from mark; clear mark' ],
    /*11*/ [ null,  10,  1,  'void',    'add' ],
  ],
  [ /*12*/ [ '?',   13,  1,  'void',    'add' ],
    /*12*/ [ null,  12,  1,  'void',    'add' ],
  ],
  [ /*13*/ [ '/',    0,  4,  'void',    'remove from mark; clear mark' ],
    /*13*/ [ null,  12,  1,  'void',    'add' ],
  ],
  [ /*14*/ [ '\r',   0,  5,  'void',    'remove from mark; clear mark; add' ],
    /*14*/ [ '\n',   0,  5,  'void',    'remove from mark; clear mark; add' ],
    /*14*/ [ null,  14,  1,  'void',    'add' ],
  ],
  [ /*15*/ [ '-',   16,  1,  'void',    'add' ],
    /*15*/ [ null,   0,  1,  'void',    'add' ],
  ],
  [ /*16*/ [ '\r',   0,  5,  'void',    'remove from mark; clear mark; add' ],
    /*16*/ [ '\n',   0,  5,  'void',    'remove from mark; clear mark; add' ],
    /*16*/ [ null,  16,  1,  'void',    'add' ],
  ],
  [ /*17*/ [ '!',   18,  1,  'void',    'add' ],
    /*17*/ [ null,   0,  1,  'void',    'add' ],
  ],
  [ /*18*/ [ '\r',   0,  5,  'void',    'remove from mark; clear mark; add' ],
    /*18*/ [ '\n',   0,  5,  'void',    'remove from mark; clear mark; add' ],
    /*18*/ [ null,  18,  1,  'void',    'add' ],
  ],
];


// step 1. collect all action names.
action_names = {};
for state in fsa {
  idx = loopIndex();
  for transit in state {
    x = transit[0].ascii();
    if x > max_ch { max_ch = x; }
    action_names.(transit[2]) = transit[4];
  }
}

// step 2. generate the fsa
print [[[*
  /**
   * ==================
   *  Generated method
   * ==================
   *
   * Need these methods:
   *
   *  readChar() -- should handle EOF
*]];
for k in action_names.keysSorted() {
  println '   *  action', k, '() -- ', action_names.(k);
}
print '   */';
  
print [[[*
  private void fsa() throws IOException {
    state = 0;
loop:
    while(true) {
      ch = readChar();
      //int old_state = state;
      switch(state) {
*]];

for from_state in fsa {
  state = loopIndex();
  println '      case ', state, ':', nl,
          '        switch(ch) {';
  for transit in from_state {
    see = transit[0];
    if see == null {
      print '        default  ';
    } else {
      print "        case '";
      switch(see) {
      case '\r': print "\\r'"; break;
      case '\t': print "\\t'"; break;
      case '\n': print "\\n'"; break;
      case '\'': print "\\''"; break;
      case '\\': print "\\\\'"; break;
      default:   print see, "' "; break;
      }
    }
    if transit[3] == 'boolean' {
      print ': if (action', transit[2], '()) break loop;';
    } else {
      print ': action', transit[2], '();';
    }
    if state != transit[1] { print ' state=', transit[1], ';'; }
    println ' break;';
  }
  println '        }', nl,
          '        break;';
}
println [[[*      }
      //System.out.println("["+old_state+"]--" + ((char)ch) + "-->["+state+"] (mark: " + mark + "): " + sb);
    }
  } // end of fsa().

} // end of class.
*]];
