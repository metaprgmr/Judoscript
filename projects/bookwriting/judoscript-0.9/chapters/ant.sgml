<synopsis>
Ant is a popular software build tool based on XML and Java. The two interesting points about Ant and <J> are:</p>
<ol>
<li><J> provides a custom Ant task, <code>&lt;judoscript></code>, that makes using <J> within Ant build script easy and convenient. Embedded <J> code can intimately interact with the Ant environment, and invoke another Ant target with the native system function <code>antcall()</code>, allowing <J> to be a flow control language in the Ant build script.</li>
<li>Because Ant employs an extensible architecture, anyone can provide a <i>custom Ant task</i>. Many practical operations have been built as Ant tasks and this collection of Ant tasks comprise a special form of extremely useful software library. <J> can take advantage of this software resource via its Ant scripting support, i.e., the <kw>anttask::</kw><nt>XMLLiteral</nt> syntax. The task itself is the same XML code you would use in an Ant build script.</li>
</ol>
</synopsis>

<!--===============================================================-->
<section1 title="Introduction to Ant" id="intro" status="green">

<!------------------------------------->
<section2 title="What is Ant?" id="whatis">

<p><i>Ant</i> is an XML-based make tool, build in Java. It is a Java counterpart for the <i>make</i> utility on Unix and other platforms. It uses an XML document to specify rules, actions and targets. Each action is realized by a Java class that implements a particular <i>Task</i> interface.</p>

<p>Key advantages of Ant over traditional make tools include:</p>

<ol>
<li> Ant is built in Java and runs anywhere Java runs.</li>
<li> Ant is XML-based, so the build files are more descriptive.</li>
</ol>

<p>The flip side of these advantages are:</p>

<ol>
<li>Traditional make utilities use shell commands for tasks; this gives them the liberty to run any commands available in your operating system shell. Ant actions, however, must be implemented in a Java class. If you have a new native tool to be added to the build process, you would have to create a new Java class following the Ant protocol and define a set of XML syntax (such as attribute names and meanings of values, embedded elements, etc.)</li>
<li>Because each task is arbitrarily defined by a developer, that developer defines new rules on top of the original task rules (e.g., command-line parameter format); hence, there are as many new rules as there are tasks. Although the basic build rules such as dependencies and targets are easy to memorize, mastering all the task-specific rules is virtually impossible. Some may argue that the task XML rules are more readable and user-friendly; other may wonder, "I need to know the original tool anyway, why a new set of rules on top of that?"</li>
<li>Because of XML, it is verbose. However, since build files are created once and sparsely modified, this is not a huge concern.</li>
</ol>

<p>Like it or not, Ant's popularity has soared with that of Java. Today, most Java projects are built with Ant; so do many non-Java or even non-software projects. Ant has become the <i>de facto</i> build tool and an important part of Java application development.</p>

<p>Let's first understand what Ant build scripts are and how they work, and clarify the use of terminologies.</p>

</section2><!--------------------------->

<!------------------------------------->
<section2 title="Ant Build Scripts" id="antbuild">

<p>An Ant build script is an XML document with a root node called <tag>project</tag>, which contains one or more <tag>target</tag> tags. Targets can depend on other targets, and may contain its own <i>tasks</i> as <tag>task</tag> tags. It is the tasks that performs various actions of the build process.</p>

<p>The Ant package has defined a number of <i>core</i> tasks and a number of <i>optional</i> tasks. Developers can also define new tasks for any purposes. In the core tasks, just a handful are for the build process control, such as <tag>ant</tag>, <tag>antcall</tag> and <tag>taskdef</tag>. Let's call them as <i>process control</i> tasks. All other tasks perform specific practical actions, and let's call them <i>action</i> tasks.</p>

<p>Today, the core and optional tasks alone include well over 100 Ant action tasks defined, documented and shipped in the Ant package. Many third parties have supplied support for their own action tasks. Some implementations of the action tasks are in pure Java; many others are simply Java wrapper classes that run native commands, such as tasks for <i>Rational ClearCase</i>, <i>Visual Source Safe</i> (VSS), etc. This creates a uniquely interesting phenomenon, that a Java-based build tool has actually amassed a huge repository of practical utilities! In software engineering parlance, Ant tasks comprise a special type of software library that is uniquely useful.</p>

<p>In <J>, the <code>anttask::</code> operator allows you to take advantage of any Ant action task in your scripts. This is detailed later in this chapter.</p>

<p>Ant has a <tag>script</tag> tag to embedded scripting languages as a flexible task. The <tag>script</tag> supports any scripting languages, including <J>, that conform to the <i>Bean Scripting Framework</i> (BSF) API. <J> provides a simple <tag>judoscript</tag>, making <J> code scripting in Ant easier. What are the benefits of scripting in <J> rather than using Ant tasks? You can do a lot of work with minimal amount of code, and sometimes <J> scripts carry out many sophisticated tasks. For instance, you can:</p>

<ul>
<li>use JDBC scripting to set up, test and clean up your data-driven applications,</li>
<li>transform file contents during various build steps,</li>
<li>do complicated archiving and file processing,</li>
<li>launch <J> scripts to automate document creation,</li>
<li>etc., etc.</li>
</ul>

<p>The <tag>judoscript</tag> is discussed in detail next. Before we go into introducing <J> support for Ant, let's take a look at a sample Ant build script and see how it works, and what matters between the Ant environment and <J>'s Ant support.</p>

<todo desc="provide the example and explanation.">

</section2><!--------------------------->

<!------------------------------------->
<section2 title="Judo and Ant" id="j_and_ant">

<p>

<p><title3>Ant task scripting in <J></title3><i>Ant task scripting</i> is to take advantage of this sector of software resources for practical uses. Different languages and tools can have different ways to do this. <J> provides a native, intuitive way to script Ant tasks. It simply uses the XML format to run an Ant task in your script. The benefit is, all Ant tasks are documented with examples in XML; you can simply cut-and-paste the examples into a <J> program for use and modify. There is no extra step in between to convert the XML rules to another syntax, hence no chance for ambiguity or mistakes.</p>

</section2><!--------------------------->

</section1><!--=====================================================-->

<!--===============================================================-->

<section1 title="Embed Judo in Ant Build Script" id="inant" status="green">

<p><J> code and programs can be used in Ant build scripts in two ways:</p>

<ol>
<li> through Ants support for the <i>Bean Scripting Framework</i> (BSF) mechanism; this will be discussed as a case study for <ref id="embedjava:withbsf"/>. Or</li>
<li> through the <tag>judoscript</tag> ant task. This is what we discuss here.</li>
</ol>

<!------------------------------------->
<section2 title="The Ant &lt;judoscript&gt; Task" id="anttag">

<p><J> provides an Ant task implementation to run a <J> program, either as embedded code or in an external script file. The Ant task class is <code>com.judoscript.AntJudoScriptTask</code>, and is mapped to the task tag name <tag>judoscript</tag>:</p>

<asis>
&lt;taskdef name="judoscript" classname="com.judoscript.AntJudoScriptTask"/&gt;
</asis>

<p>This Ant task is very simple; it can take a <code>src</code> attribute as the external script file and a <code>params</code> attribute for the program attributes. The <code>src</code> attribute is optional; if not specified, the embedded text, which is likely to be quoted in <code>&lt;![CDATA[</code> and <code>]]&gt;</code>, is expected as program code. In either case, the <code>params</code> can be used to specify command-line parameters. The following Ant build file demonstrates both usages:</p>

<codelist name="snoop.xml" id="snoop.xml">
&lt;?xml version="1.0"?&gt;

&lt;project name="test" default="target1" basedir="."
         description="Illustrates both ways of using the &lt;judoscript&gt; tag."&gt;

  &lt;taskdef name="judoscript" classname="com.judoscript.AntJudoScriptTask"/&gt;

  &lt;target name="target1" description="Run Judo code specified herein."&gt;
    &lt;judoscript params="abc -x:1 def ghi -y:something"&gt;
      // This is the code of snoop.judo copied verbatim.

      println '#cmd_args: ', #cmd_args;
      for x in #cmd_args {
        println '  #cmd_args[', loopIndex(), '] = ', x;
      }

      println nl, '#args: ', #args;
      for x in #args {
        println '  #args[', loopIndex(), '] = ', x;
      }

      println nl, '#options: ', #options;
      for x in #options {
        println '  #options[', x, '] = ', #options.(x);
      }

      println nl, 'Original os.name = ${os.name}';
      #sysprops.('os.name') = 'XXXXXXXXXXXXXX';
      println     'Now,     os.name = ${os.name}';
    &lt;/judoscript&gt;
  &lt;/target&gt;

  &lt;target name="target2" description="Run a Judo script (in the same JVM)."&gt;
    &lt;judoscript src="snoop.judo" params="abc -x:1 def ghi -y:something" /&gt;
  &lt;/target&gt;

&lt;/project&gt;
</codelist>

<p>The first <tag>judoscript</tag> tag runs a segment of code embedded in the tag itself, and passes some command-line parameters. The code simply prints out values of different kinds. The second <tag>judoscript</tag> tag runs an external program, <code>build.judo</code>, whose content is exactly the same as the embedded code in the first tag.</p>

</section2><!--------------------------->

<!------------------------------------->
<section2 title="Passing Information between Ant and the &lt;judoscript&gt; Tag" id="passant">

<p>Although the format of the <tag>judoscript</tag> tag is simple, this tag is different from other Ant action tasks by nature. Most other Ant tasks perform a specific job, whereas <tag>judoscript</tag> contains code of a general scripting language. One of the most important aspect of embedding code is, how to pass values between the Ant build environment and the embedded code.</p>

<p>The <tag>judoscript</tag> tag can, like any Ant tags, use the <code>${<i>name</i>}</code> in attribute values. Note, however, in the embedded <J> code, the <code>${<i>name</i>}</code> notation is for accessing <J> variables, not as expansion of Ant property values as you might assume. Programmatically, the code used in <tag>judoscript</tag>, whether is directly embedded or in an external file, exchanges information through the system properties. The following example demonstrates this:</p>

<codelist name="pass_value.xml" id="pass_value.xml">
&lt;?xml version="1.0"?&gt;

&lt;project name="test" default="main" basedir="."&gt;
  &lt;taskdef name="judoscript" classname="com.judoscript.AntJudoScriptTask"/&gt;

  &lt;target name="main" depends="step1,step2,step3" /&gt;

  &lt;target name="step1"&gt;
    &lt;property name="user.prop" value="Ant is everywhere." /&gt;
    &lt;echo message=" ${user.prop}" /&gt;
  &lt;/target&gt;

  &lt;target name="step2"&gt;
    &lt;judoscript&gt;
      println ${user.prop}; // returns the system property value

      #sysprops.('user.prop') = 'Judo is fun!';
    &lt;/judoscript&gt;
  &lt;/target&gt;

  &lt;target name="step3"&gt;
    &lt;echo message=" ${user.prop}" /&gt;
  &lt;/target&gt;

&lt;/project&gt;
</codelist>

<p>The test build script runs three steps:</p>

<ol>
<li>Set a property in the project.</li>
<li>The embedded <J> code prints out the current property, then set that property to a different value.</li>
<li>Back in the project, the last task prints out the property value again.</li>
</ol>

<p>The output is:</p>

<asis>
Buildfile: pass_value.xml

step1:
     [echo]  Ant is everywhere.

step2:
[judoscript] Ant is everywhere.

step3:
     [echo]  Judo is fun!

main:

BUILD SUCCESSFUL
</asis>

<p>Note that the same <code>${user.prop}</code> expression occurred twice in this build script: once in step 1 as embedded in the <code>message</code> attribute of <tag>echo</tag>, and once in step 2 in the <J> code. Although syntactically they appear to be the same and so are the results, the meanings are totally different. In step 1, <code>${user.prop}</code> is expanded by Ant with its system property value; in step 2, <code>${user.prop}</code> is a <J> expression that returns that system property value within the <J> language engine.</p>

<p><title3>Accessing environment variables</title3>You can not set any environment variables from <J>, Ant or Java itself; hence, regardless of how you access environment variables in Ant build scripts, the embedded <J> code, like <J> code in a stand-alone program, still accesses environment variables as global variables. The following build script prints out the environment variable <code>TEMP</code> from Ant and embedded <J>:</p>

<codelist name="show_env.xml" id="show_env.xml">
&lt;?xml version="1.0"?&gt;

&lt;project name="test" default="main" basedir="."&gt;
  &lt;taskdef name="judoscript" classname="com.judoscript.AntJudoScriptTask"/&gt;

  &lt;target name="main" depends="step1,step2" /&gt;

  &lt;target name="step1"&gt;
    &lt;property environment="env" /&gt;
    &lt;echo message=" ${env.TEMP}" /&gt;
  &lt;/target&gt;

  &lt;target name="step2"&gt;
    &lt;judoscript&gt;
      println ${TEMP};
    &lt;/judoscript&gt;
  &lt;/target&gt;

&lt;/project&gt;
</codelist>

<!------------------------------------->
<section2 title="Call Other Ant Targets and Access Other Resources" id="antcall">

<p><J> provides a special-purpose system function, <code>antcall()</code>, to call Ant tasks in the same build script from the embedded <J> code. The following example demonstrates this:</p>

<codelist name="antcall.xml" id="antcall.xml">
&lt;?xml version="1.0"?>

&lt;project name="test" default="main" basedir=".">
  &lt;taskdef name="judoscript" classname="com.judoscript.AntJudoScriptTask"/>

  &lt;target name="t1" depends="t1.1">
    &lt;echo message="Target One." />
  &lt;/target>

  &lt;target name="t1.1">
    &lt;echo message="Target One'." />
  &lt;/target>

  &lt;target name="t2">
    &lt;echo message="Target Two." />
  &lt;/target>

  &lt;target name="main">
    &lt;judoscript>
      println '-------------';
      antcall 't1', 't2';
      println '-------------';
    &lt;/judoscript>
  &lt;/target>

&lt;/project>
</codelist>

<p>The output is:</p>

<asis>
Buildfile: callant.xml

main:
[judoscript] -------------

t1.1:
     [echo] Target One'.

t1:
     [echo] Target One.

t2:
     [echo] Target Two.
-------------

BUILD SUCCESSFUL
</asis>

<p>The <code>antcall()</code> function can take variable number of parameters, which are Ant target names. If no parameters are provided, it will have no effect. This function effectively makes <J> a flow-control language for Ant build scripts.</p>

<p><title3>Accessing other Ant services</title3>Other than system properties, there is a predefined variable, <code>$$anttask</code>, available to both the embedded <J> code or the external program. That variable holds the Ant task object. It is the actual Ant task, which is an instance of <code>com.judoscript.AntJudoScriptTask</code>; this class extends <code>org.apache.tools.ant.Task</code>, so that you can call any of its methods, such as the <code>getProject()</code>, which in turn provides access to most services within Ant. Please refer to Ant's documentation for its Java APIs.</p>

</section2><!--------------------------->

</section1><!--=====================================================-->

<!--===============================================================-->

<section1 title="Script Ant Tasks" id="anttask" status="green">

<p>As we discussed earlier, Ant tasks comprise a unique type of library of extremely practical utilities. This is a great resource for scripting language users. <J> provides an easy and intuitive way to take advantage of this. The syntax is very simple:</p>

<grammar id="anttask">
<rule name="AntTaskStatement"><kw>anttask::</kw><nt>XMLLiteral</nt></rule>
</grammar>

<p>The <nt>XMLLiteral</nt> specifies the Ant task as documented in XML format. These tasks should all be action tasks, and the following tags are prohibited:</p>

<ul>
<li><tag>ant</tag></li>
<li><tag>anttask</tag></li>
<li><tag>fail</tag></li>
<li><tag>target</tag></li>
</ul>

<p>The following example uses the <tag>echo</tag> Ant task twice:</p>

<codelist name="ant_echo.judo" id="ant_echo.judo">
a = 'ants';

anttask::&lt;echo message="Hello, ${a}!"/&gt;

anttask::&lt;echo&gt;
  Hello, more ${a}!
&lt;/echo&gt;
</codelist>

<p>In this example, <code>${a}</code> is used in both the attribute value and in the embedded tag text. This is the way to pass values to an Ant task. Such expression can't be used to create tag names or tag attribute names. The output of this program is:</p>

<asis>
     [echo] Hello, ants!
     [echo]
     [echo]   Hello, more ants!
</asis>

<p>Ant tasks used in <J> should be individual action tasks, and they are not expected to contain other subtasks. However, they can contain embedded elements, as demonstrated in this example:</p>

<codelist name="ant_exec.judo" id="ant_exec.judo">
src = '.';

anttask::
  &lt;exec dir="${src}" executable="cmd.exe" os="Windows 2000" output="dir.txt"&gt;
    &lt;arg line="/c dir"/&gt;
  &lt;/exec&gt;
</codelist>

<p>As you would expect, Ant tasks have to "live" in an Ant project; <J> maintains a single project for all the Ant tasks invoked.</p>

<!------------------------------------->
<section2 title="Passing Information between code and Ant tasks" id="passanttask">

<p>Different Ant tasks can define different ways to communicate their results back to the Ant environment (i.e., the Ant <i>project</i>;) the most common way is through setting system properties, such as Ant core tasks <tag>basename</tag>, <tag>condition</tag>, <tag>uptodate</tag>, etc. Other may choose to use more <i>ad hoc</i> means; for instance, the core Ant task <tag>checksum</tag> returns the checksum of a file in a text file. Let's see an example that uses system properties to pass values:</p>

<codelist name="ant_basename.judo" id="ant_basename.judo">
filename = '/usr/bin/judo';

anttask::&lt;basename property="base.name" file="${filename}"/&gt;

println 'Base name: ', ${base.name};
</codelist>

<p>The output is:</p>

<asis>
Base name: judo
</asis>

</section2><!--------------------------->

<!------------------------------------->
<section2 title="Handle Ant task execution failures" id="antfail">

<p>Ant tasks may fail by throwing an instanceof <code>org.apache.tools.ant.BuildException</code>, which is a wrapper of another exception. <J> captures this <code>BuildException</code>, retrieves and throws the original one. You can capture this exception:</p>

<codelist name="ant_excpt.judo" id="ant_excpt.judo">
anttask::&lt;exec executable="do_not_exist" /&gt;

catch:
  println &lt;err&gt; '--- Ant task deliberately failed:';
  $_.printStackTrace();
  println &lt;err&gt; '--- Stack trace printed.';
</codelist>

</section2><!--------------------------->

</section1><!--=====================================================-->

<!------------------------------------->
<section2 title="When and why to script Ant tasks in Judo" id="whenwhy">

<p>As we have discussed earlier, Ant tasks comprise a special type of software library of many practical utilities. Ant tasks are designed for use by the Ant build system, but can also be utilized by Java and Java scripting languages. <J> provides an easy language facade for scripting Ant tasks. This turns Ant tasks into truly practical utilities.</p>

<p><J> is a rich functional scripting language; it embeds a lot of useful, practical utilities right in the language itself. Many Ant core action tasks have their counterpart in <J>, where the <J> counterparts are generally easier to use, more flexible and intuitive. Such tasks include those that deal with file systems, file archives, RDBMSs, native execution, e-mail, and any data and file processing.</p>

<p>Hence, Ant tasks that do not have <J> counterparts are the best to be used. These include <i>configuration management</i> system access (e.g., CVS, ClearCase, Microsoft Visual Source Safe, etc.) Tasks such as FTP, SCP, etc. can also be good candidate, as these usages are more challenging and system-dependent; sharing the same code (Ant scriptlet) between <J> code and Ant build scripts may be desirable. There are also many other tasks for performing compilation, javadoc generation, etc., that can be useful at times.</p>

<p>Ant allows developers to develop new tasks. Now that you can script Ant tasks in <J>, this can also be a great way to extend <J> language. You can register a custom task just like you would in an Ant build script, assuming your new task is not shipped with the Ant software package. The following is an example that registers a new task and uses it:</p>

<codelist name="antburger.judo" id="antburger.judo">
anttask::&lt;taskdef name="js" classname="com.judoscript.AntJudoScriptTask"/&gt;

anttask::&lt;js&gt;
  println 'This is Judo-in-Ant-in-Judo, a.k.a. AntBurger!',
          nl, nl, 'AntBurger is delicious!';
&lt;/js&gt;
</codelist>

<p>This program registers a <tag>js</tag> to embed <J> code, then uses this <tag>js</tag> to invoke the embedded <J> code. The output is;</p>

<asis>
This is Judo-in-Ant-in-Judo, a.k.a. AntBurger!

AntBurger is delicious!
</asis>

<p>If you have a custom Ant task, you can do something similar.</p>

</section2><!--------------------------->

</section1><!--=====================================================-->
