<%
  var title = 'Frequently Asked Questions about Judo';
  var keywords = "judo, judoscript, jusp, juspt, jamaica, java scripting, jdbc scripting, hibernate scripting, xml scripting, html scraping, os shell scripting, shell scripting, soap scripting, web app, jusp platform, juspt transform, jvm bytecode, jvm macro assembler, bytecode assembler";
  var tabID = 'judo';
%>
<%!include '../site_src/include/header.jusp' %>

<%
  var bText = false;
  var numQuestion = 1;
  do $$local as sgml {
  <category>:  %><h3><%= $_.title %></h3><ol start="<%= numQuestion %>"><%
               bText = true;
  </category>: %></ol><%
               bText = false;
  :TEXT,<>:    if bText { %>$_<% }
  <q>:         url = ($_.url != null) ? $_.url : ('#q' + numQuestion);
               %><li><a href="<%= url %>"><b><%
               ++numQuestion;
               bText = true;
  </q>:        %></b></a><%
               bText = false;
  }
  %></ol><hr width="90%"><br><%

  // answers start here
  bText = false;
  numQuestion = 1;
  %><table border=0 cellpadding=5 cellspacing=5 class=secondary3><%
  do $$local as sgml {
  <category>,
  </category>: bText = false;
  <q>:         %><tr><td colspan=2><%
               if $_.id { %><a name="<%= $_.id %>"></a><% }
               %><b><a name="q<%= numQuestion %>"></a><%= numQuestion %>. <%
               ++numQuestion;
               bText = true;
  </q>:        %></b></td></tr><%
               bText = false;
  :TEXT,<>:    if bText { %>$_<% }
  <sample>:    %><table border=0 cellspacing=0 cellpadding=0 class=secondary3><tr bgcolor=#DDDDDD><td><pre><%
  </sample>:   %></pre></td></tr></table><%
  <ans>:       %><tr><td valign=top><b><%= answer %></b></td><td><%
               bText = true;
  </ans>:      %><tr><td>&nbsp;</td><td><a href=#begin>[back to top]</a><br>&nbsp;</td></tr><%
               bText = false;
  }
%>
</table>
<%!include '../site_src/include/footer.jusp' %>

<%@end%>

<category title="General Language Questions">

<q id=diff>What is the difference between Judo and other scripting languages?
What is the compelling hook over others?</q>
<ans>
<p>Judo is a potent programming and Java scripting language.
What differs it from others is, Judo has many built-in language constructs for popular application areas,
making their uses intuitive, natural and elegant.
See the <a href="articles/whitepaper.html#i_def">definition of scripting</a> to learn why Judo is so
different than programming languages that you are so familiar with.
With such a 3GL-4GL language design, Judo puts extraordinary emphasis on ease-of-use as well as ease-of-program.
</p>

<p>Take Python, a perfect example of traditional programming languages, especially so-called scripting
languages. It employs a small set of core language syntax and constructs, including a library mechanism
that allows users to extend functionalities of the language. A library is a collection of APIs that
application software are built upon. To ensure maximum reusablity and applicability, APIs are generally
low-level and detailed relative to the problem you are trying to solve. Such is the 3GL approach.</p>

<p>If 4GL is a new term to you, think about Unix shells. Unix shells are legitimate programming
languages, and has special commands that pertain to topics common to all Unix system users, such as
file system manipulation, process control, system configuration, etc. For instance, you use 'cp'
command to copy files, instead of coding a job-control-language (with APIs) to do the same.
Judo is the first and only Java-based scripting language that does all the above but extends its
reach into many of today's popular application fields, such as JDBC scritping, XML scripting, SGML
scraping, COM scripting, internet scripting, GUI scripting, etc. This is the compelling hook over
most other scripting languages.</p>
</ans>


<q id=jython>How does Judo compare to J/Python?</q>
<ans>
<p>Jython, BeanShell, Rhino, Judo and other Java-based scripting languages are all general-purpose programming languages
and are capable of scripting Java, despite their syntax differences.
On top of that, Judo also provides many application level scripting features <em>at the language level</em>,
so Judo supports object-level, OS-level and application-level scripting.
See the <a href="articles/whitepaper.html#i_def">definition of scripting</a> for a more meaningful comparison.</p>

</ans>


<q id=learn>Is Judo hard to learn? Do I have to know Java?</q>
<ans>
<p>The core Judo language uses syntax and programming model similar to JavaScript.
Variables are not typed and no declaration is needed. Like any modern languages,
it adopts an object-oriented language design, every kind of value has a set of operations (methods).
Judo is <a href="/ref/">well documented</a> with
<a href="/examples/">ample examples</a> and
<a href="/articles/">technical articles</a>.</p>
<p>You will need to know how to run Java software on your platform (Unix, Windows, ...) in
order to run Judo programs. For instance, if you want to use JDBC scripting to handle
data in an Oracle database, you will need to know how to add Oracle's JDBC driver into the
class path. Judo is a powerful scripting langauge itself and has many powerful
functionality to do most work.</p>
<p>One of Judo's key features is Java scripting. This is essentially designed for Java
programmers, but some times non-Java programmers may have to use Java as well. An example is
the Java byte array used in binary file read and write.</p>
<p>The recommended way to extend Judo is write Java code, although you can definitely
create Judo functions and classes to do the same. Writing Java extension library is
good because the same code can be shared by Judo and Java programs; they are typically
more performant and robust thanks to Java's strong-typedness.</p>
<p>In short, <u>Java knowledge is not required for end users, but is extremely important to
take full advantage of Judo</u>.</p>
</ans>


<q id=learn_app>Is it hard to learn Judo's application features?</q>
<ans>
<p>How hard can it be to learn these?</p>
<sample>
mail::send
    from: 'feedback@judoscript.com'
      to: 'A@some-site.cum'
      cc: 'A@other-site.cum'
 subject: 'The software. Thank you!'
  attach: 'judo.jar.zip, src.jar'
    body: &#91;&#91;*
          Dear Mr. A,

          Thank you very much for your interest in this software.
          Attached is the software and source code.
          Please visit www.judoscript.com for the latest news
          and information. Thank you!

          Sincerely,
          Judo
          &#42;&#93]
htmlBody: &#91;&#91;*
          &lt;html>&lt;body>
          &lt;p>Dear Mr. A,
          &lt;p>Thank you very much for your interest in &lt;i>this software&lt;/i>.
          Attached is the software and source code.&lt;/p>
          &lt;p>Please visit &lt;a href=www.judoscript.com>www.judoscript.com&lt;/a>
          for the latest news and information. Thank you!&lt;/p>
          &lt;p>Sincerely,&lt;/p>
          &lt;p>Judo&lt;/p>
          &lt;/body>&lt;/html>
          &#42;&#93]
;</sample>

<p>Compare this to coding with <code>javax.mail.*</code> packages, especially if you don't
know how to program <code>javax.mail.*</code> yet.</p>

<sample>
do 'http://www.yahoo.com' as sgml
{
&lt;a>:    if ($_.href) println $_.href;
&lt;img>:  println $_.src; // $_ represents the current tag.
}</sample>

<p>This program prints out the URLs in &lt;a> and &lt;img> tags of an HTML page.
This is similar to XML SAX programming but is significantly more concise and elegant.
Judo supports XML SAX programming exactly the same way.</p>

<p>Judo application features are designed based on the needs of the topic; they
are natural and intuitive to the problem domain, and are easy to use and learn; this is
especially true when compared to their Java counterpart.</p>
</ans>


<q id=lgpl>What is the licensing term of Judo?</q>
<ans>
<p>LGPL. You are essentially free to do anything with the software and its source code.</p>
</ans>


<q id=notuse>When NOT to use Judo?</q>
<ans>
<p>Scripting languages are great for doing things quickly, or tasks that are simple,
straightforward and take frequently updates.
Scripting languages are not designed for building big software;
that is the job of <em>system languages</em> such as C, C++ or Java.
If a big software project is coded in a scripting language, you can pretty much assume it is still in prototype stage.
Why? because system languages have mechanisms that enable compilers enforce stringent rules so as to prevent many potential problems;
compilers can also optimize the final product to gain more performance.</p>
<p>Judo, being a pure scripting language, is no exception to this rule.</p>
</ans>


<q id=itsname>Why the name Judo?</q>
<ans>
<p>Better names are already taken. The name is chosen because a) it sounds ok, and b)
it starts with "J".</p>
</ans>


<q id=shtcmg>What are Judo's shortcomings?</q>
<ans>
<p>Judo is totally based on Sun's Java. Java implements the common denominator of
all supported platforms, and is not great to deal with popular platform features such
as 'chmod' on Unix. Judo tries hard to provide features on popular platforms by
working around Java's problems (for instance, 'chmod' and 'chown' are implemented for
Unix platforms, environment variables are handled, etc.), but there must be situations
where platform native code (through JNI) is needed. The classic example is COM scripting.
This does not necessarily break the "100% Pure Java"-ness of Judo, because such
features are declared to be optional. By the way, Judo never bothered to pass the
"100% Pure Java" test.</p>
</ans>


<q id=perf>What about Judo's Performance?</q>
<ans>
Judo's performance is surprisingly good, most probably thanks to the JVM JIT compilers.
The start-up is not that fast; on Windows 2000 and (slower) Linux machines,
small to medium size scripts take 2 to 4 seconds to begin executing.
</ans>


<q id=facts>Can you list some facts about Judo?</q>
<ans>
<ol>
<li> Designed ground-up just for Java.
<li> Pure Java.
<li> Open-source freeware under LGPL; can be use for commercial or any purposes.
<li> Is a 3GL and a 4GL.
<li> Hybrid procedural and object-oriented language.
<li> Basic data types include integer, floating-point number, date/time
     and string; each with large number of operations (methods).
<li> Advanced data structures:
     <ul>
     <li> array and linked list; flexible sorting and filtering
     <li> struct and ordered map; flexible sorting and filtering
     <li> stack and queue
     <li> tree
     <li> table data; in-memory relational database features
     </ul>
<li> Support advanced programming techniques:
     <ul>
     <li> user-defined classes and inheritance
     <li> exception handling and resume statement
     <li> thread programming similar to functions
     <li> user-defined functions; can take variable number of parameters, and
          parameters can have default values
     <li> function variables and lambda functions
     <li> dynamic evaluation of code and files
     <li> flexible iterations of arrays and linked lists
     </ul>
<li> Java-like statements and expressions.
<li> Syntactic sugar, including various comment formats for Unix auto-run and
     code disabling.
<li> Seamless uses of Java classes, objects and arrays.
<li> Java collection classes share same syntax as Judo
     container data structures.
<li> Java static methods can be aliased to become Judo functions.
<li> Explicit JNDI support to facilitate RMI and EJB scripting.
<li> Is extensible by Java classes or by Judo libraries or a mixture of both.
     Library code can be moved from Judo into Java (later) without changing
     the interface.
<li> All existing Java software tool packages, commercial or free, can be used
     directly in Judo.
<li> Sophisticated JDBC scripting and database manipulation features.
<li> Many built-in application features; some with special syntax (hence 4GL),
     others are system functions. An incomplete list includes:
     <ul>
     <li> JDBC scripting
     <li> XML scripting
     <li> HTML/SGML scraping
     <li> Microsoft COM scripting
     <li> HTTP/HTTPS client and server
     <li> Schedule jobs with HTTP monitors
     <li> Flexible file copying and archiving between file systems, JAR, ZIP
          and TAR files
     <li> Consistent I/O model for local files, files within JAR/ZIP/TAR archives,
          gzipped files, internet resources and string data sources
     <li> FTP, SSH, SCP, networking services, Windows registry editing, Unix syslog
     <li> Encryption
     <li> Send mail
     <li> Versatile executable running
     <li> Java GUI creation
     <li> Text and data processing features
     </ul>
<li> Embeddable by Java software either by Bean-Scripting-Framework
     or via its own engine.
<li> Is interpreted. Precompilation is planned.
<li> Rich documentation for reference, tutorials and examples.
</ol>
</ans>


<q id=whyto>Why you created Judo?</q>
<ans>
<p>To use Java for <em>everything</em>, not just programming. Specifically,
<ol>
<li> to scripting Java,
<li> to scripting many tasks extremely easily, and
<li> to do these within an easy and powerful programming environment.
</ol>
</p>
</ans>


<q id=embed>Is Judo embeddable in Java software?</q>
<ans>
<p>Yes, in one of the two ways:
<a href="/ref/s.html?fa=java_judo_eng">its engine API</a> and
<a href="/ref/s.html?fa=java_judo_bsf">its BSF support</a>.
</ans>


<q id=thrd>How to use threads in Judo? Can I use Java thread objects?</q>
<ans>
<p>Judo supports an easier 
<a href="/ref/s.html?fa=lang_thrd">thread
programming model</a>. Since you can use any Java objects in Judo programs,
nothing prevents you from using <code>java.lang.Thread</code> objects, but this is
strongly discouraged.</p>
</ans>


<q id=jscls>Can I script Java classes of the Judo engine?</q>
<ans>
This is prohibited (by the language engine) except for the <code>com.judoscript.util.*</code>
package and its sub-packages. And their uses are not documented or guaranteed.
</ans>


<q id=natsup>What is <em>native support</em> in Judo? What is a non-native support then?</q>
<ans>
<p>A <em>native support in Judo</em> generally means specific syntax support in Judo,
sometimes it is just a built-in function. A "non-native" support for a Java software or feature
basically means you have to program using the Java APIs.</p>
</ans>

</category>
<category title="Judo Usage Questions">

<q>Are Judo's JDBC scripts cross-RDBMS's?</q>
<ans>
<p>This question is equivalent to "Is Java's JDBC cross-RDBMS's", because Judo does
not provide anything beyond what JDBC drivers provide. In other words, Judo passes
SQL and other parameters via JDBC API to the specific JDBC driver being used without further
filtering and interpretation.</p>
</ans>


<q>How to specify a (non-built-in) JDBC driver class?</q>
<ans>
<p>You can use the Java way of <code>Class.forName(jdbcDriverClassName)</code>, or specify
it as an attribute of "driver" in the <a href="/ref/s.html?syn=ConnectStatement">database
connection statement</a>.</p>
</ans>


<q>How to copy multiple directories into a single ZIP file?</q>
<ans>
<p>Use <code>createJar()</code>, <code>createZip()</code> or <code>createTar()</code>
system functions to create a ZIP or tar archive, then use the
<a href="/ref/s.html?syn=FSCopyStatement"><code>copy</code></a>
command for each directory into that archive before finally call the
<code>close()</code> method of the archive object to complete.</p>
</ans>


<q>How to serialize executable runs?</q>
<ans>
<p>By specifying a variable to receive the return value of the executable, you can effectively
serialize multiple executable runs.</p>
</ans>


<q>Can I use <em>my</em> Java classes? Do I have to specify my long Java class names everytime?</q>
<ans>
<p>Any Java classes can be used in Judo. Use the
<a href="/ref/s.html?syn=JavaClassShortcuts">Java package name shortcut</a>
mechanism to make it easier to use if your Java class names have long package names.</p>
</ans>


<q url="/articles/java_excpt.html#extend">Can I use a Java interface? How?</q>
<ans>
<p>See <a href="/articles/java_excpt.html#extend">here</a>.</p>
</ans>


<q url="/articles/java_excpt.html#extend">Can I extend and use a Java abstract class and interfaces? How?</q>
<ans>
<p>See <a href="/articles/java_excpt.html#extend">here</a>.</p>
</ans>


<q>How to use Java static members and methods?</q>
<ans>
<p>Use <code>::</code> between the Java class name and the static method or member
name to use them. Or, If a static Java method is repeatedly used, can use the
<a href="/ref/s.html?syn=StaticJavaFunctionDeclaration">static
Java method alias</a> mechanism to make them look like regular Judo functions.</p>
</ans>


<q>What is the easiest way to read a text file, line-by-line?</q>
<ans>
<p>Use the <a href="/ref/s.html?syn=LinesStatement"><code>do ... as lines {}</code></a> statement.</p>
</ans>


<q id=template>Is Judo good for templates?</q>
<ans>
You have two ways to create a templating system in Judo,
<ol>
<li> For simple text replacement, use the <a href="/ref/s.html?syn=LinesStatement"><code>do ... as lines {}</code></a> statement.
<li> You can define your own SGML format with tags, case-sensitively or insensitively, and eaily create processing software with
     the <a href="/ref/s.html?syn=SgmlStatement"><code>do ... as sgml {}</code></a> statement.
</ol>

Another convenience is the <a href="/ref/s.html?fa=localdata">Local Data</a> mechanism, that you can attach a template right
at the end of the script.

</category>
